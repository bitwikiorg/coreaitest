
/**
 * Research Adapter for GitHub Integration
 * 
 * Connects the research system output with GitHub storage.
 */

import { saveFileToGitHub, saveResearchToGitHub } from './githubIntegration.js';
import * as fs from 'fs/promises';
import * as path from 'path';

/**
 * Save research to local file and GitHub
 * @param {Object} research - Research data
 * @returns {Promise<Object>} - Result with file paths and GitHub URL
 */
export const saveResearchToFileWithGitHub = async (research) => {
  if (!research || !research.query) {
    throw new Error("Invalid research data");
  }
  
  // Determine research directory
  const researchDir = process.env.RESEARCH_DIR || 'research';
  
  // Ensure directory exists
  await fs.mkdir(researchDir, { recursive: true });
  
  // Create filename
  const subject = research.query
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .substring(0, 50);
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `research-${subject}-${timestamp}.md`;
  const filePath = path.join(researchDir, filename);
  
  // Generate markdown content
  const content = generateResearchMarkdown(research);
  
  // Save locally
  await fs.writeFile(filePath, content);
  console.log(`Research saved to file: ${filePath}`);
  
  // Save to GitHub if enabled
  let githubResult = null;
  if (process.env.GITHUB_INTEGRATION_ENABLED === 'true') {
    try {
      githubResult = await saveResearchToGitHub(research);
      console.log(`Research saved to GitHub: ${githubResult.url}`);
    } catch (error) {
      console.error("Failed to save to GitHub:", error);
      // Continue even if GitHub save fails
    }
  }
  
  return {
    success: true,
    localPath: filePath,
    githubUrl: githubResult?.url,
    githubPath: githubResult?.path
  };
};

/**
 * Generate markdown content from research data
 * @param {Object} research - Research data
 * @returns {string} - Markdown content
 */
const generateResearchMarkdown = (research) => {
  return `# Research: ${research.query}

## Summary
${research.summary || 'No summary available.'}

## Key Findings
${research.keyLearnings ? research.keyLearnings.map(item => `- ${item}`).join('\n') : 'No key findings recorded.'}

## Sources
${research.sources ? research.sources.map(source => `- [${source.title || 'Source'}](${source.url})`).join('\n') : 'No sources recorded.'}

---
Generated by COREAI Research System on ${new Date().toISOString()}
`;
};

/**
 * Check if GitHub integration is properly configured
 * @returns {Object} - Configuration status
 */
export const checkGitHubIntegration = () => {
  const requiredConfig = ['GITHUB_TOKEN', 'GITHUB_OWNER', 'GITHUB_REPO'];
  const missingConfig = requiredConfig.filter(item => !process.env[item]);
  
  return {
    isConfigured: missingConfig.length === 0 && process.env.GITHUB_INTEGRATION_ENABLED === 'true',
    missingConfig
  };
};

/**
 * Initialize scheduled sync of research to GitHub
 * @returns {Object} - Scheduler information
 */
export const initializeScheduledSync = () => {
  // Implementation for scheduled sync
  // This could use a library like node-cron for scheduling
  console.log("GitHub scheduled sync initialized");
  
  return {
    isActive: true,
    interval: process.env.GITHUB_SYNC_INTERVAL || '1h'
  };
};

export default {
  saveResearchToFileWithGitHub,
  checkGitHubIntegration,
  initializeScheduledSync
};
/**
 * Research Adapter - Provides utilities for research integration
 */

/**
 * Check if GitHub integration is properly configured
 * @returns {boolean} - True if GitHub integration is configured
 */
export const checkGitHubIntegration = () => {
  const isConfigured = !!(
    process.env.GITHUB_TOKEN &&
    process.env.GITHUB_OWNER &&
    process.env.GITHUB_REPO
  );
  
  return {
    configured: isConfigured,
    owner: process.env.GITHUB_OWNER || '',
    repo: process.env.GITHUB_REPO || '',
    branch: process.env.GITHUB_BRANCH || 'main',
    path: process.env.GITHUB_PATH || 'research'
  };
};

/**
 * Adapts research format for GitHub storage
 * @param {object} research - Research data
 * @returns {object} - Adapted research data
 */
export const adaptResearchForGitHub = (research) => {
  if (!research) return null;
  
  return {
    query: research.query || 'Unknown Query',
    summary: research.summary || '',
    learnings: Array.isArray(research.learnings) ? research.learnings : [],
    sources: Array.isArray(research.sources) ? research.sources : [],
    tags: Array.isArray(research.tags) ? research.tags : ['research'],
    depth: research.depth || 3,
    breadth: research.breadth || 5,
    date: research.date || new Date().toISOString()
  };
};
